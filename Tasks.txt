1 Введение в язык C++
	1.2 История языка C++
		1.2.1 1998
		1.2.2 Данный курс об основах языка C++.; Создателем языка C++ является Бьёрн Страуструп.
	1.3 Характеристики языка C++
		1.3.1 C++ компилируемый язык программирования.; C++ позволяет писать низкоуровневые программы.
	1.4 Зачем нужен компилятор?
		1.4.1 Код программы, написанный на интерпретируемом языке, можно без предварительной компиляции запустить на любой операционной системе, где установлен интерпретатор этого языка.; Код программы, написанный на языке, который компилируется в байт код виртуальной машины, достаточно скомпилировать однажды, чтобы программу можно было запускать на любой операционной системе, где есть соответствующая виртуальная машина.; Для запуска программы, код которой был написан на интерпретируемом языке, на компьютере должен быть установлен интерпретатор этого языка.
	1.5 Структура кода на C++
		1.5.1 void bar() { foo(); }; void foo() { std::cout << "Hello, World!\n"; }; int a;
		1.5.2 Файл utility.cpp подключает только один заголовочный файл из перечисленных.; Если в заголовке utility.hpp отсутствует защита от повторного включения, то он будет включен в parser.cpp дважды.; Файл parser.cpp включает заголовочный файл utility.hpp.
	1.6 Как компилируется программа на C++
		1.6.2 Если в коде C++ вы вызываете функцию, которая была объявлена, но не была определена, то это ошибка этапа линковки.; Даже для программы состоящей из одной пустой функции int main() { return 0; } все равно требуется линковка.; Если в коде C++ вы вызываете необъявленную функцию, то это ошибка этапа компиляции.
	1.8 Введение в синтаксис C++, часть 2
		1.8.2 3
2 Как выполняются программы на C++
	2.2 Стек вызовов
		2.2.2 9
3 Структуры и классы
	3.1 Структуры
		3.1.1 6
		3.1.2 3 
		3.1.3 6
	3.6 Константность
		3.6.1 int const  * const * m
		3.6.2 size_t length(); bool equal(const String &other)
	3.7 Конструктор копирования и оператор присваивания
		3.7.1 1; 3
		3.7.4 1; 2; 3
4 ООП
	4.2 Перегрузка
		4.2.1 в результате вызова foo('a') будет выведено char; вызов foo(97) приведет к ошибке компиляции
		4.2.2 программа не скомпилируется, потому что такая перегрузка функции square не допустима
		4.2.3 в char const & ch2 = const_greet.at(0) будет вызвана const версия метода at; в char ch1 = greet.at(0) будет вызвана не const версия метода at
		4.2.4 вызов promotion(sh) не скомпилируется, так как нет ни одной подходящей функции для вызова
	4.3 Виртуальные методы
		4.3.1 Виртуальные методы могут быть константными.; Виртуальные методы могут вызывать невиртуальные методы.; Все виртуальные методы базового класса являются виртуальными и для производных классов.
	4.6 Особенности наследования в C++
		4.6.1 Если в базовом классе виртуальная функция определена как private, то в производном классе её можно переопределить как public.; Если в базовом классе виртуальная функция определена как public, то в производном классе её можно переопределить как private.; Производные классы не видят private-предков своего базового класса.; Чистый виртуальный метод с определением — это не то же самое, что обычный виртуальный метод.
5 Дополнительные возможности C++
	5.4 Ключевые слова static и inline
		5.4.1 Файлы first.cpp, second.cpp и third.cpp компилируются без проблем.; На этапе компоновки возникает ошибка из-за множественного определения функции foo.
		5.4.2 Все файлы компилируются и компонуются без проблем, в итоговой программе будет 3 версии функции foo.; Файлы first.cpp, second.cpp и third.cpp компилируются без проблем.
		5.4.3 3
		5.4.4 Программа компилируется и компонуется без проблем.; При компоновке лишние определения функции foo будут отброшены.; Файлы first.cpp, second.cpp и third.cpp компилируются без проблем.
		5.4.5 1
		5.4.6 3